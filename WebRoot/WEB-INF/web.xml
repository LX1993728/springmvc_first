<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns="http://xmlns.jcp.org/xml/ns/javaee"
	xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_3_1.xsd"
	id="WebApp_ID" version="3.1">
	<display-name>springmvc_first</display-name>
	<!-- 前端控制器 -->
	<servlet>
		<servlet-name>springmvc</servlet-name>
		<servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
		<!-- 加载SpringMVC配置 -->
		<init-param>
			<!-- 配置文件的位置 -->
			<!-- 如果不配置contextConfigLocation,
				 默认查找的配置文件名称classpath下的: servlet名称+"servlet.xml"即springmvc-servlet.xml
			 -->
			<param-name>contextConfigLocation</param-name>
			<param-value>classpath:springmvc.xml</param-value>
		</init-param>
	</servlet>
	<servlet-mapping>
		<servlet-name>springmvc</servlet-name>
		<!-- 
		可以配置/, 此工程 所有请求全部由springmvc解析，此种方式可以实现
		RESTful方式，需要特殊处理对静态文本的解析不能由springmvc解析
		可以配置*.do或*.action, 所有请求的url扩展名为.do或.action由springmvc解析，此种方法
		不可以使用/*,如果配置/*，返回的jsp也由springmvc解析，这是不对的
		 -->
		<url-pattern>*.action</url-pattern>
	</servlet-mapping>
	<welcome-file-list>
		<welcome-file>index.html</welcome-file>
		<welcome-file>index.htm</welcome-file>
		<welcome-file>index.jsp</welcome-file>
		<welcome-file>default.html</welcome-file>
		<welcome-file>default.htm</welcome-file>
		<welcome-file>default.jsp</welcome-file>
	</welcome-file-list>
</web-app>